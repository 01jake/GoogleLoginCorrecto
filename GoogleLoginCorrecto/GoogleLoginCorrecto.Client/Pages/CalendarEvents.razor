@inject HttpClient Http
@inject NavigationManager NavManager
@using GoogleLoginCorrecto.Client.Components
@using GoogleLoginCorrecto.Client;

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger m-4">@errorMessage</div>
}
else
{
    <div class="container-fluid p-0">
        <div class="row g-0">
            <aside class="col-12 col-md-3 col-lg-2 bg-dark text-light vh-100 d-flex flex-column p-3">
                <div class="mb-4">
                    <DxButton Click="() => IsOpen = !IsOpen"
                              RenderStyle="@ButtonRenderStyle.Secondary"
                              Class="btn btn-primary bg-dark border-0">
                             
                        Crear Evento
                    </DxButton>
                    <DxDropDown @bind-IsOpen="@IsOpen"
                                MinWidth="max(25vw, 300px)"
                                PositionMode="DropDownPositionMode.Bottom"
                                CloseMode="DropDownCloseMode.Close"
                                PreventCloseOnPositionTargetClick="true">
                        <BotonNuevo IsBusy="isCreating"
                                    ErrorMessage="@createErrorMessage"
                                    OnCreate="HandleCreateEvent" />
                    </DxDropDown>
                </div>

                <div class="mb-4">
                    <input type="date" class="form-control bg-secondary btn btn-primary bg-dark border-0 text-light" @bind="StartDate" />
                </div>
                <nav class="flex-grow-1 overflow-auto">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item bg-dark text-light border-0"><LoginDisplay/></li>
                    
                    </ul>
                </nav>
            </aside>

            <section class="col-12 col-md-9 col-lg-10 d-flex flex-column vh-100">

                <div class="flex-grow-1">
                    <DxScheduler @ref="Scheduler"
                                 @bind-StartDate="@StartDate"
                                 DataStorage="@DataStorage"
                                 CssClass="w-100 h-100"
                                 AllowCreateAppointment="false"
                                 AllowEditAppointment="false"
                                
                                 VirtualScrollingEnabled="true">
                        <Views>
                            <ComponenteCalendario />
                        </Views>
                    </DxScheduler>
                </div>

            </section>

        </div>
    </div>
}

@code {
    private DxScheduler? Scheduler { get; set; }
    private bool isLoading = true;
    private bool isCreating = false;
    private string? createErrorMessage;
    private bool IsOpen { get; set; }
    private string? errorMessage;
    private DateTime StartDate { get; set; } = DateTime.Today;
    private DxSchedulerDataStorage DataStorage { get; set; } = new DxSchedulerDataStorage();

    private record GoogleApiEvent(string Id, string Summary, DateTimeOffset? Start, DateTimeOffset? End);

    
    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var uri = new Uri(new Uri(NavManager.BaseUri), "api/calendar/events");
            var events = await Http.GetFromJsonAsync<GoogleApiEvent[]>(uri);
            if (events is { Length: > 0 })
            {
                var apps = events.Select(e => new Appointment
                    {
                        GoogleEventId = e.Id,
                        Subject = e.Summary,
                        StartDate = e.Start?.DateTime ?? DateTime.Today,
                        EndDate = e.End?.DateTime ?? e.Start?.DateTime.AddHours(1) ?? DateTime.Today.AddHours(1),
                        AllDay = e.Start.HasValue && e.End.HasValue &&
                                        e.Start.Value.TimeOfDay == TimeSpan.Zero &&
                                        (e.End.Value.Date - e.Start.Value.Date).Days == 1,
                        LabelId = 1,
                        StatusId = 1,
                        Description = "Evento de Google Calendar"
                    }).ToList();

                DataStorage = new DxSchedulerDataStorage
                    {
                        AppointmentsSource = apps,
                        AppointmentMappings = new DxSchedulerAppointmentMappings
                        {
                            Start = nameof(Appointment.StartDate),
                            End = nameof(Appointment.EndDate),
                            Subject = nameof(Appointment.Subject),
                            AllDay = nameof(Appointment.AllDay),
                            LabelId = nameof(Appointment.LabelId),
                            StatusId = nameof(Appointment.StatusId),
                            Description = nameof(Appointment.Description),
                            Id = nameof(Appointment.GoogleEventId)
                        }
                    };
            }
            else
            {
                errorMessage = "No se encontraron eventos en el calendario.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los eventos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCreateEvent(NewEventRequest newEvent)
    {
        isCreating = true;
        createErrorMessage = null;
        StateHasChanged();

        try
        {
            var uri = new Uri(new Uri(NavManager.BaseUri), "api/calendar/events");
            var res = await Http.PostAsJsonAsync(uri, newEvent);
            if (res.IsSuccessStatusCode)
                await LoadEvents();
            else
                createErrorMessage = $"Error: {await res.Content.ReadAsStringAsync()}";
        }
        catch (Exception ex)
        {
            createErrorMessage = $"Error de red: {ex.Message}";
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void ChangeDate(int offset)
    {
        StartDate = StartDate.AddDays(offset);
    }
    
}
